var documenterSearchIndex = {"docs":
[{"location":"utility/#Other-utility-functions-API","page":"Other utility functions API","title":"Other utility functions API","text":"","category":"section"},{"location":"utility/","page":"Other utility functions API","title":"Other utility functions API","text":"gaussian_kernel\nconvolve\ncorrect_name\nfind_peaks","category":"page"},{"location":"utility/#CePNEMAnalysis.gaussian_kernel","page":"Other utility functions API","title":"CePNEMAnalysis.gaussian_kernel","text":"gaussian_kernel(x::Real; sigma::Float64=1.0)\n\nEvaluates a Gaussian kernel at position xwith standard deviationsigma`.\n\n\n\n\n\n","category":"function"},{"location":"utility/#CePNEMAnalysis.convolve","page":"Other utility functions API","title":"CePNEMAnalysis.convolve","text":"convolve(x::Vector{Float64}, k::Vector{Float64})\n\nConvolves a vector x with a kernel vector k.\n\n\n\n\n\n","category":"function"},{"location":"utility/#CePNEMAnalysis.correct_name","page":"Other utility functions API","title":"CePNEMAnalysis.correct_name","text":"correct_name(neuron_name)\n\nCorrects the name of a neuron by removing the \"0\" substring from the name if it contains \"DB0\" or \"VB0\". This causes the neuron name to be compatible with the connectome files.\n\nArguments:\n\nneuron_name::String: The name of the neuron to be corrected.\n\nReturns:\n\nneuron_name::String: The corrected name of the neuron.\n\n\n\n\n\n","category":"function"},{"location":"utility/#CePNEMAnalysis.find_peaks","page":"Other utility functions API","title":"CePNEMAnalysis.find_peaks","text":"find_peaks(neural_activity::Vector{Float64}, threshold::Float64)\n\nFind the peaks in a vector of neural activity above a given threshold. This method is most useful for finding spikes in the activity of spiking neurons.\n\nArguments:\n\nneural_activity::Vector{Float64}: A vector of neural activity.\nthreshold::Float64: The threshold above which to consider a value a peak.\n\nReturns:\n\npeaks::Vector{Int}: A vector of indices of the peaks in the neural activity.\npeak_heights::Vector{Float64}: A vector of the heights of the peaks in the neural activity.\n\n\n\n\n\n","category":"function"},{"location":"umap/#UMAP-API","page":"UMAP API","title":"UMAP API","text":"","category":"section"},{"location":"umap/#Compute-UMAP-embedding","page":"UMAP API","title":"Compute UMAP embedding","text":"","category":"section"},{"location":"umap/","page":"UMAP API","title":"UMAP API","text":"compute_extrapolated_CePNEM_posterior_stats\nappend_median_CePNEM_fits","category":"page"},{"location":"umap/#CePNEMAnalysis.compute_extrapolated_CePNEM_posterior_stats","page":"UMAP API","title":"CePNEMAnalysis.compute_extrapolated_CePNEM_posterior_stats","text":"compute_extrapolated_CePNEM_posterior_stats(\n    fit_results, analysis_dict, datasets, θh_pos_is_ventral; n_idx=10001, use_pumping=true, normalize=true\n)\n\nComputes statistics of the CePNEM fits of all neurons in each dataset across the set of extrapolated behaviors.\n\nArguments\n\nfit_results: CePNEM fit results.\nanalysis_dict: CePNEM fit analysis results dictionary.\ndatasets: Array of datasets to use.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\nn_idx (optional, default 10001): Number of particles in CePNEM fits.\nuse_pumping (optional, default true): Whether to use pumping in CePNEM fits.\nnormalize (optional, default true): Whether to normalize CePNEM fits by signal value.\n\nReturns\n\nmedian_CePNEM_fits: Median of the CePNEM fits of each neurons in each dataset across the set of extrapolated behaviors.\nmean_CePNEM_fits: Mean of the CePNEM fits of each neurons in each dataset across the set of extrapolated behaviors.\nvar_CePNEM_fits: Variance of the CePNEM fits of each neurons in each dataset across the set of extrapolated behaviors.\n\n\n\n\n\n","category":"function"},{"location":"umap/#CePNEMAnalysis.append_median_CePNEM_fits","page":"UMAP API","title":"CePNEMAnalysis.append_median_CePNEM_fits","text":"append_median_CePNEM_fits(fit_results, analysis_dict, umap_dict, datasets)\n\nAppends median CePNEM fits together into a single array.\n\nArguments\n\nfit_results: CePNEM fit results.\nanalysis_dict: CePNEM fit analysis results dictionary containing the extrapolated_behaviors key.\numap_dict: UMAP results dictionary containing the median_CePNEM_fits key.\ndatasets: Array of datasets to use.\n\n\n\n\n\n","category":"function"},{"location":"umap/#Project-new-datasets-into-UMAP-space","page":"UMAP API","title":"Project new datasets into UMAP space","text":"","category":"section"},{"location":"umap/","page":"UMAP API","title":"UMAP API","text":"project_CePNEM_to_UMAP","category":"page"},{"location":"umap/#CePNEMAnalysis.project_CePNEM_to_UMAP","page":"UMAP API","title":"CePNEMAnalysis.project_CePNEM_to_UMAP","text":"project_CePNEM_to_UMAP(fit_results, analysis_dict, umap_dict, datasets, θh_pos_is_ventral; n_idx=10001, use_pumping=true)\n\nProjects median CePNEM fits to UMAP space.\n\nArguments\n\nfit_results: CePNEM fit results.\nanalysis_dict: CePNEM fit analysis results dictionary.\numap_dict: UMAP results dictionary containing the extrapolated_umap_median key.\ndatasets: Array of datasets to use.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\nn_idx (optional, default 10001): Number of particles in CePNEM fits.\nuse_pumping (optional, default true): Whether to use pumping in the model.\n\n\n\n\n\n","category":"function"},{"location":"umap/#Visualize-UMAP-embeddings","page":"UMAP API","title":"Visualize UMAP embeddings","text":"","category":"section"},{"location":"umap/","page":"UMAP API","title":"UMAP API","text":"make_umap_rgb\ncompute_umap_subcategories!","category":"page"},{"location":"umap/#CePNEMAnalysis.make_umap_rgb","page":"UMAP API","title":"CePNEMAnalysis.make_umap_rgb","text":"make_umap_rgb(feature_imgs, feature_colors, full_umap_img, color_all, contrast)\n\nMakes RGB image out of UMAP space.\n\nArguments:\n\nfeature_imgs: List of UMAP-projected images showing features of interest.\nfeature_colors: List of UMAP-projected images showing colors of interest.\nfull_umap_img: List of full UMAP image\ncolor_all: Background color of full UMAP image\ncontrast: Contrast of features vs full UMAP image.\n\n\n\n\n\n","category":"function"},{"location":"umap/#CePNEMAnalysis.compute_umap_subcategories!","page":"UMAP API","title":"CePNEMAnalysis.compute_umap_subcategories!","text":"compute_umap_subcategories!(\n    fit_results, analysis_dict, umap_dict, datasets; dataset_cats=\"2021-05-26-07\", \n    rng_cats=1, ewma_step=5, ewma_max=50, suffix=\"_median\", use_median=false\n)\n\nComputes UMAP projections for each encoding category.\n\n# Arguments\n- `fit_results`: CePNEM fit results.\n- `analysis_dict`: CePNEM fit analysis results dictionary.\n- `umap_dict`: UMAP results dictionary. Modified in-place by this function.\n- `datasets`: Array of datasets to use.\n- `dataset_cats` (optional, default `\"2021-05-26-07\"`): Dataset to use for finding encoding categories.\n- `rng_cats` (optional, default `1`): Range to use for finding encoding categories.\n- `ewma_step` (optional, default `5`): Step size for exponentially weighted moving average.\n- `ewma_max` (optional, default `50`): Maximum number of steps for exponentially weighted moving average.\n- `suffix` (optional, default `\"_median\"`): Suffix for extrapolated UMAP key in `analysis_dict`.\n- `use_median` (optional, default `false`): Whether to use median (`true`) or all posterior points (`false`) for extrapolated UMAP projections.\n\n\n\n\n\n","category":"function"},{"location":"decode/#Decoder-models-API","page":"Decoder models API","title":"Decoder models API","text":"","category":"section"},{"location":"decode/","page":"Decoder models API","title":"Decoder models API","text":"fit_decoder\ncompute_variance_explained\naverage_dict_qualities","category":"page"},{"location":"decode/#CePNEMAnalysis.fit_decoder","page":"Decoder models API","title":"CePNEMAnalysis.fit_decoder","text":"fit_decoder(\n    fit_results::Dict, datasets::Vector, decode_vars::Vector, t_val::Vector, λ_dict::Dict;\n    traces_use::Union{Nothing, Dict}=nothing, v_condition::String=\"all\"\n)\n\nFit a decoder to predict the values of decode_vars from the neural traces in fit_results using L1-regularized linear regression.\n\nArguments\n\nfit_results::Dict: A dictionary containing the results of fitting CePNEM to the neural data.\ndatasets::Vector: A vector of dataset names to fit the decoder to.\ndecode_vars::Vector: A vector of behavior variable names to decode.\nt_val::Vector: A vector of timepoints to use for cross-validation.\nλ_dict::Dict: A dictionary of regularization strengths for each variable.\n\nOptional Arguments\n\ntraces_use::Union{Nothing, Dict}=nothing: A dictionary of trace arrays to use instead of the ones in fit_results.\nv_condition::String=\"all\": The velocity condition to use for selecting timepoints. Can be \"all\", \"fwd\", or \"rev\".\n\nReturns\n\ndict_sol::Dict: A dictionary of the fitted decoder models.\ndict_pred::Dict: A dictionary of the predicted values of decode_vars for each timepoint.\ndict_cost::Dict: A dictionary of the mean squared error between the predicted and actual values of decode_vars for each timepoint.\n\n\n\n\n\n","category":"function"},{"location":"decode/#CePNEMAnalysis.compute_variance_explained","page":"Decoder models API","title":"CePNEMAnalysis.compute_variance_explained","text":"compute_variance_explained(dict_cost::Dict, fit_results::Dict, t_val::Vector, decode_vars::Vector, λ_dict::Dict; min_P_variance::Float64=0.5)\n\nCompute the variance explained by the decoder for each dataset, behavior variable, regularization strength, and timepoint.\n\nArguments\n\ndict_cost::Dict: A dictionary of the mean squared error between the predicted and actual values of decode_vars for each timepoint.\nfit_results::Dict: A dictionary containing the results of fitting CePNEM to the neural data.\nt_val::Vector: A vector of timepoints to use for cross-validation.\ndecode_vars::Vector: A vector of behavior variable names to decode.\nλ_dict::Dict: A dictionary of regularization strengths for each variable.\n\nOptional Arguments\n\nmin_P_variance::Float64=0.5: The minimum variance of the P variable for a dataset to be included in the analysis.\n\nReturns\n\ndict_quality::Dict: A dictionary of the variance explained by the decoder for each dataset, behavior variable, regularization strength, and timepoint.\n\n\n\n\n\n","category":"function"},{"location":"decode/#CePNEMAnalysis.average_dict_qualities","page":"Decoder models API","title":"CePNEMAnalysis.average_dict_qualities","text":"average_dict_qualities(dict_qualities::Dict)\n\nCompute the average variance explained by the decoder for each dataset, behavior variable, regularization strength, and timepoint.\n\nArguments\n\ndict_qualities::Dict: A dictionary of the variance explained by the decoder for each dataset, behavior variable, regularization strength, and timepoint.\n\nReturns\n\ndict_quality::Dict: A dictionary of the average variance explained by the decoder for each dataset, behavior variable, regularization strength, and timepoint.\n\n\n\n\n\n","category":"function"},{"location":"validation/#Encoding-validation-metrics-API","page":"Encoding validation metrics API","title":"Encoding validation metrics API","text":"","category":"section"},{"location":"validation/#Bayesian-Generalization-Index-(BGI)","page":"Encoding validation metrics API","title":"Bayesian Generalization Index (BGI)","text":"","category":"section"},{"location":"validation/","page":"Encoding validation metrics API","title":"Encoding validation metrics API","text":"get_CePNEM_fit_score\nget_CePNEM_full_posterior_score\ncompute_BGI\nget_CePNEM_prior_score","category":"page"},{"location":"validation/#CePNEMAnalysis.get_CePNEM_fit_score","page":"Encoding validation metrics API","title":"CePNEMAnalysis.get_CePNEM_fit_score","text":"get_CePNEM_fit_score(\n    model_params::Vector{Float64}, neuron_trace::Vector{Float64}, \n    v::Vector{Float64}, θh::Vector{Float64}, P::Vector{Float64}\n)\n\nCompute the CePNEM fit score, which is a measurement of how well the model fit the data. Sets the initial condition parameter y0 to the first timepoint, which enables comparisons of models across time better.\n\nArguments:\n\nmodel_params::Vector{Float64}: The model parameters to use.\nneuron_trace::Vector{Float64}: The neuron trace to fit.\nv::Vector{Float64}: The worm's velocity.\nθh::Vector{Float64}: The worm's head curvature.\nP::Vector{Float64}: The worm's pumping rate.\n\n\n\n\n\n","category":"function"},{"location":"validation/#CePNEMAnalysis.get_CePNEM_full_posterior_score","page":"Encoding validation metrics API","title":"CePNEMAnalysis.get_CePNEM_full_posterior_score","text":"get_CePNEM_full_posterior_score(full_posterior, neuron_trace, v, θh, P)\n\nSample a random set of parameters from the CePNEM fitted posterior and compute the model score on the observed data.\n\nArguments:\n\nfull_posterior::Vector{Vector{Float64}}: The full posterior distribution of the model parameters.\nneuron_trace::Vector{Float64}: The neuron trace to fit.\nv::Vector{Float64}: The worm's velocity.\nθh::Vector{Float64}: The worm's head curvature.\nP::Vector{Float64}: The worm's pumping rate.\n\n\n\n\n\n","category":"function"},{"location":"validation/#CePNEMAnalysis.compute_BGI","page":"Encoding validation metrics API","title":"CePNEMAnalysis.compute_BGI","text":"compute_BGI(test_score, prior_score)\n\nCompute the Bayesian Generalization Index (BGI) of the model, using fractional overperformance relative to the prior as the metric.\n\nArguments:\n\ntest_score::Vector{Float64}: The model scores on the test data.\nprior_score::Vector{Float64}: The model scores on the prior data.\n\n\n\n\n\n","category":"function"},{"location":"validation/#CePNEMAnalysis.get_CePNEM_prior_score","page":"Encoding validation metrics API","title":"CePNEMAnalysis.get_CePNEM_prior_score","text":"get_CePNEM_prior_score(neuron_trace::Vector{Float64}, v::Vector{Float64}, θh::Vector{Float64}, P::Vector{Float64})\n\nSample a random set of parameters from the CePNEM prior and compute the model score on the observed data. Sets the initial condition parameter y0 to the first timepoint, which enables comparisons of models across time better.\n\nArguments:\n\nneuron_trace::Vector{Float64}: The neuron trace to fit.\nv::Vector{Float64}: The worm's velocity.\nθh::Vector{Float64}: The worm's head curvature.\nP::Vector{Float64}: The worm's pumping rate.\n\n\n\n\n\n","category":"function"},{"location":"plot/#Plotting-API","page":"Plotting API","title":"Plotting API","text":"","category":"section"},{"location":"plot/#Compute-optimal-time-ranges-to-plot","page":"Plotting API","title":"Compute optimal time ranges to plot","text":"","category":"section"},{"location":"plot/","page":"Plotting API","title":"Plotting API","text":"get_pumping_ranges","category":"page"},{"location":"plot/#CePNEMAnalysis.get_pumping_ranges","page":"Plotting API","title":"CePNEMAnalysis.get_pumping_ranges","text":"get_pumping_ranges(datasets::Vector{String}, P_ranges::Dict; rngs_valid::Vector{Int}=[1,2])\n\nComputes time ranges with the most pumping variance for each dataset.\n\nArguments:\n\ndatasets::Vector{String}: List of datasets to analyze\nP_ranges::Dict: Dictionary of pumping ranges for each dataset\nrngs_valid::Vector{Int} (optional, default [1,2]): List of time ranges to consider\n\n\n\n\n\n","category":"function"},{"location":"plot/#Cluster-visualization-tool","page":"Plotting API","title":"Cluster visualization tool","text":"","category":"section"},{"location":"plot/","page":"Plotting API","title":"Plotting API","text":"dendrocolor!","category":"page"},{"location":"plot/#CePNEMAnalysis.dendrocolor!","page":"Plotting API","title":"CePNEMAnalysis.dendrocolor!","text":"dendrocolor!(dg, clusters, colors; progenitors=nothing, k=nothing)\n\nColor the dendrogram dg according to the cluster assignments in clusters.  The colors argument should be a vector of colors, one for each cluster.  The progenitors argument can be a vector of indices of the progenitor nodes to use for coloring. Alternatively, the k argument can be an integer specifying the number of clusters to use for coloring.\n\nArguments\n\ndg: A StatsPlots dendrogram of a hierarchical clustering result.\nclusters: The clusters being plotted in the dendrogram.\ncolors::Vector{Color}: The colors to use for coloring.\nprogenitors::Vector{Int} = nothing: The indices of the progenitor nodes to use for coloring.\nk::Int = nothing: The number of clusters to use for coloring.\n\nReturns\n\nnode_assignments::Dict{Int,Int}: A dictionary mapping node indices to cluster assignments.\n\nAlso in-place modifies the plot object dg to color it correctly.\n\n\n\n\n\n","category":"function"},{"location":"plot/#Other-plotting-utilities","page":"Plotting API","title":"Other plotting utilities","text":"","category":"section"},{"location":"plot/","page":"Plotting API","title":"Plotting API","text":"plot_posterior_heatmap!\nplot_deconvolved_neural_activity!\nplot_colorbar\ncolor_to_rgba\nplot_arrow!\nget_color_from_palette","category":"page"},{"location":"plot/#CePNEMAnalysis.plot_posterior_heatmap!","page":"Plotting API","title":"CePNEMAnalysis.plot_posterior_heatmap!","text":"plot_posterior_heatmap!(fit_results, dataset, rng, neuron, param1, param2; init=true, color=palette(:default)[2], x_rng=-3:0.1:3, y_rng=-3:0.1:3, rgb=false)\n\nPlots the heatmap of the projection of posterior particles of a neuron into a 2D susbspace.\n\nArguments:\n\nfit_results: Dictionary of Gen fit results.\ndataset: Dataset containing the neuron.\nrng: Range where the neuron was fit.\nneuron: Neuron\nparam1: First parameter to plot (as an index 1 through 9)\nparam2: Second parameter to plot (as an index 1 through 9)\nc1rng: First parameter range\nc2rng: Second parameter range\ninit (optional, default true): Initialize a new plot, rather than overlaying on top of a preexisting plot\ncolor (optional, default palette(:default)[2]): Color of the heatmap\nx_rng (optional, default -3:0.1:3): x-axis range\ny_rng (optional, default -3:0.1:3): y-axis range\nrgb (optional, default false): If set, return RGB histogram and x and y ranges, instead of a plot.\n\n\n\n\n\n","category":"function"},{"location":"plot/#CePNEMAnalysis.plot_deconvolved_neural_activity!","page":"Plotting API","title":"CePNEMAnalysis.plot_deconvolved_neural_activity!","text":"plot_deconvolved_neural_activity!(\n    dataset, rngs, deconvolved_activity_plot, v_ranges_plot, θh_ranges_plot, P_ranges_plot, axis;\n    res=200, plot_size=(700,350), init=true, len=200, pos=[100]\n)\n\nPlots deconvolved neural activity.\n\nArguments:\n\ndataset\nrngs: Ranges to plot\ndeconvolved_activity_plot: Deconvolved neural activity, for plotting\nv_ranges_plot: velocity ranges\nθh_ranges_plot: head curvature ranges\nP_ranges_plot: feeding ranges\naxis: variable to plot. Can be 2 to plot velocity while varying head curvature, or 3 to plot feeding.\nres (optional, default 200): Resolution of plot\nplot_size (optional, default (700,350)): Size of plot.\ninit (optional, default true): Initialize a new plot.\nlen: Length to extrapolate other behaviors\npos: Position of other behaviors to use\n\n\n\n\n\n","category":"function"},{"location":"plot/#CePNEMAnalysis.plot_colorbar","page":"Plotting API","title":"CePNEMAnalysis.plot_colorbar","text":"plot_colorbar(rng_min::Real, rng_max::Real, other_ticks::Vector, cmap, n_colors::Integer, figsize::Tuple{Real, Real})\n\nPlots a colorbar with a gradient of colors ranging from rng_min to rng_max with n_colors colors. The other_ticks argument is a vector of additional ticks to be displayed on the colorbar. The cmap argument is a ColorMap object that specifies the color scheme to be used. The n_colors argument is an Integer specifying the number of colors to be used in the gradient. The figsize argument is a tuple of two Real values that specifies the size of the figure.\n\nArguments:\n\nrng_min::Real: The minimum value of the range of values to be displayed on the colorbar.\nrng_max::Real: The maximum value of the range of values to be displayed on the colorbar.\nother_ticks::Vector: A vector of additional ticks to be displayed on the colorbar.\ncmap: A ColorMap that specifies the color scheme to be used.\nn_colors::Integer: The number of colors to be used in the gradient.\nfigsize::Tuple{Real, Real}: A tuple of two Real values that specifies the size of the figure.\n\nReturns:\n\nNothing. The function is called for its side effects of plotting the colorbar.\n\n\n\n\n\n","category":"function"},{"location":"plot/#CePNEMAnalysis.color_to_rgba","page":"Plotting API","title":"CePNEMAnalysis.color_to_rgba","text":"color_to_rgba(color::Color, alpha::Real) -> Tuple{Float64, Float64, Float64, Float64}\n\nConverts a Color object to an RGBA tuple with the given alpha value.\n\nArguments:\n\ncolor: The Color object to convert.\nalpha: The alpha value to use for the RGBA tuple.\n\nReturns:\n\nA tuple of four Float64 values representing the RGBA values of the input Color object with the given alpha value.\n\n\n\n\n\n","category":"function"},{"location":"plot/#CePNEMAnalysis.plot_arrow!","page":"Plotting API","title":"CePNEMAnalysis.plot_arrow!","text":"plot_arrow!(arrow_start::Tuple{Real, Real}, arrow_end::Tuple{Real, Real}, arrow_color::Color, arrow_width::Real, arrow_length::Real)\n\nPlots an arrow from arrow_start to arrow_end with a given arrow_color, arrow_width, and arrow_length.\n\nArguments:\n\narrow_start::Tuple{Real, Real}: Starting point of the arrow.\narrow_end::Tuple{Real, Real}: Ending point of the arrow.\narrow_color::Color: Color of the arrow.\narrow_width::Real: Width of the arrow.\narrow_length::Real: Length of the arrow.\n\n\n\n\n\n","category":"function"},{"location":"plot/#CePNEMAnalysis.get_color_from_palette","page":"Plotting API","title":"CePNEMAnalysis.get_color_from_palette","text":"get_color_from_palette(value::Real, min_val::Real, max_val::Real, cmap::ColorMap) -> Color\n\nReturns the color corresponding to a given value in a colormap. The colormap is defined by the cmap argument, which is a ColorMap object. The value argument is the value for which the corresponding color is to be found. The min_val and max_val arguments define the range of values that the colormap spans.\n\nArguments:\n\nvalue: The value for which the corresponding color is to be found.\nmin_val: The minimum value of the range of values that the colormap spans.\nmax_val: The maximum value of the range of values that the colormap spans.\ncmap: A ColorMap object that defines the colormap.\n\nReturns:\n\nA Color object corresponding to the given value in the colormap.\n\n\n\n\n\n","category":"function"},{"location":"data/#Data-IO-API","page":"Data IO API","title":"Data IO API","text":"","category":"section"},{"location":"data/#Data-loading","page":"Data IO API","title":"Data loading","text":"","category":"section"},{"location":"data/","page":"Data IO API","title":"Data IO API","text":"load_CePNEM_output\nadd_to_analysis_dict!\nneuropal_data_to_dict","category":"page"},{"location":"data/#CePNEMAnalysis.load_CePNEM_output","page":"Data IO API","title":"CePNEMAnalysis.load_CePNEM_output","text":"load_CePNEM_output(\n    datasets::Vector{String}, fit_ranges::Dict, path_output, path_h5, n_params, \n    n_particles, n_samples, is_mcmc; load_posterior::Bool=true\n)\n\nLoads CePNEM output data.\n\nArguments:\n\ndatasets::Vector{String}: Datasets to load\nfit_ranges: Dictionary of fit ranges for each dataset\npath_output: Path to Gen output. Data must be stored in path_output/dataset/rng1torng2/h5/neuron.h5\npath_h5: Path to H5 file for the dataset, which must be stored in dataset-data.h5 in this directory.\nn_params: Number of parameters in the Gen model\nn_particles: Number of particles in the Gen fit\nn_samples: Number of samples from the posterior given by the Gen fit\nis_mcmc: Whether fits are done via MCMC (as opposed to SMC)\nload_posterior (optional, default true): Whether to load the posterior samples. If false, only the fit ranges and traces are loaded.\n\n\n\n\n\n","category":"function"},{"location":"data/#CePNEMAnalysis.add_to_analysis_dict!","page":"Data IO API","title":"CePNEMAnalysis.add_to_analysis_dict!","text":"add_to_analysis_dict!(analysis_dict::Dict, new_dict::Dict, key::String)\n\nAdds a dictionary of new results to an existing analysis dictionary.\n\nArguments:\n\nanalysis_dict::Dict: Dictionary of CePNEM analysis results\nnew_dict::Dict: Dictionary of new results to add\nkey::String: Key in analysis_dict to add new results to\n\n\n\n\n\n","category":"function"},{"location":"data/#CePNEMAnalysis.neuropal_data_to_dict","page":"Data IO API","title":"CePNEMAnalysis.neuropal_data_to_dict","text":"neuropal_data_to_dict(\n    fit_results::Dict, analysis_dict::Dict, \n    list_class::Vector, list_match_dict::Vector, datasets_neuropal::Vector{String}\n)\n\nComputes match and encoding-change match dictionaries for NeuroPAL data.\n\nArguments:\n\nfit_results::Dict}: Dictionary of CePNEM fit results.\nanalysis_dict::Dict: Dictionary of CePNEM analysis results.\nlist_class::Vector{Any}: List of classes to match.\nlist_match_dict::Vector{Any}: List of dictionaries of matches for each class.\ndatasets_neuropal::Vector{String}: List of datasets to match.\n\n\n\n\n\n","category":"function"},{"location":"data/#Export-datasets-to-WormWideWeb-compatible-format","page":"Data IO API","title":"Export datasets to WormWideWeb-compatible format","text":"","category":"section"},{"location":"data/","page":"Data IO API","title":"Data IO API","text":"export_to_json","category":"page"},{"location":"data/#CePNEMAnalysis.export_to_json","page":"Data IO API","title":"CePNEMAnalysis.export_to_json","text":"export_to_json(\n    fit_results::Dict, analysis_dict::Dict, relative_encoding_strength::Dict, \n    datasets::Vector{String}, path_output::String, path_h5::String\n)\n\nExports CePNEM analysis results to JSON file for use on the website.\n\nArguments:\n\nfit_results::Dict: Dictionary of CePNEM fit results.\nanalysis_dict::Dict: Dictionary of CePNEM analysis results.\nrelative_encoding_strength::Dict: Dictionary of relative encoding strength values for each neuron.\ndatasets::Vector{String}: List of datasets to export.\npath_output::String: Name of JSON directory to export to.\npath_h5::String: Path to HDF5 directory containing raw data.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#Encoding-metrics-API","page":"Encoding metrics API","title":"Encoding metrics API","text":"","category":"section"},{"location":"encodingmetrics/#Signal-value-computation","page":"Encoding metrics API","title":"Signal value computation","text":"","category":"section"},{"location":"encodingmetrics/","page":"Encoding metrics API","title":"Encoding metrics API","text":"compute_signal","category":"page"},{"location":"encodingmetrics/#CePNEMAnalysis.compute_signal","page":"Encoding metrics API","title":"CePNEMAnalysis.compute_signal","text":"compute_signal(fit_results::Dict)\n\nComputes signal value for each neuron in each dataset.\n\nArguments:\n\nfit_results::Dict: Dictionary of CePNEM fit results.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#Extrapolated-behaviors","page":"Encoding metrics API","title":"Extrapolated behaviors","text":"","category":"section"},{"location":"encodingmetrics/","page":"Encoding metrics API","title":"Encoding metrics API","text":"extrapolate_behaviors","category":"page"},{"location":"encodingmetrics/#CePNEMAnalysis.extrapolate_behaviors","page":"Encoding metrics API","title":"CePNEMAnalysis.extrapolate_behaviors","text":"extrapolate_behaviors(fit_results, datasets, θh_pos_is_ventral)\n\nCreates extrapolated behaviors by appending behaviors from individual animals.\n\nArguments\n\nfit_results: CePNEM fit results.\ndatasets: Array of datasets to use.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#Encoding-strength-metrics","page":"Encoding metrics API","title":"Encoding strength metrics","text":"","category":"section"},{"location":"encodingmetrics/","page":"Encoding metrics API","title":"Encoding metrics API","text":"get_relative_encoding_strength\nget_relative_encoding_strength_mt\nget_relative_encoding_strength!\nparse_tuning_strength","category":"page"},{"location":"encodingmetrics/#CePNEMAnalysis.get_relative_encoding_strength","page":"Encoding metrics API","title":"CePNEMAnalysis.get_relative_encoding_strength","text":"get_relative_encoding_strength(fit_results::Dict, datasets::Vector{String}; dataset_mapping=nothing)\n\nComputes the relative encoding strength of all neurons in all datasets.\n\nArguments\n\nfit_results::Dict: Dictionary of Gen fit results.\ndatasets::Vector{String}: List of datasets to compute relative encoding strength for.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.get_relative_encoding_strength_mt","page":"Encoding metrics API","title":"CePNEMAnalysis.get_relative_encoding_strength_mt","text":"get_relative_encoding_strength_mt(fit_results::Dict, dataset::String, rng::Int, neuron::Int; max_idx::Int=10001, dataset_mapping=nothing)\n\nComputes the relative encoding strength of the three behaviors, together with standard deviations of full and deconvolved model fits.\n\nArguments\n\nfit_results::Dict: Gen fit results.\ndataset::String: Dataset to use\nrng::Int: Range in that dataset to use\nneuron::Int: Neuron to use\nmax_idx::Int (optional, default 10001): Maximum Gen posterior sample index.\ndataset_mapping (optional, default nothing): Dictionary mapping to use different behavioral dataset.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.get_relative_encoding_strength!","page":"Encoding metrics API","title":"CePNEMAnalysis.get_relative_encoding_strength!","text":"get_relative_encoding_strength!(ps::Vector{Float64}, b_v::Vector{Float64}, b_θh::Vector{Float64}, b_P::Vector{Float64}; b_null::Union{Vector{Float64}, Nothing}=nothing)\n\nComputes the relative encoding strength of the three behaviors, together with standard deviations of full and deconvolved model fits, for a single CePNEM fit.\n\nArguments\n\nps::Vector{Float64}: Vector of model parameters.\nb_v::Vector{Float64}: Vector of behavioral values for the velocity behavior.\nb_θh::Vector{Float64}: Vector of behavioral values for the heading behavior.\nb_P::Vector{Float64}: Vector of behavioral values for the persistence behavior.\nb_null::Union{Vector{Float64}, Nothing} (optional, default nothing): Vector of behavioral values for the null behavior. If nothing, a vector of zeros is used.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.parse_tuning_strength","page":"Encoding metrics API","title":"CePNEMAnalysis.parse_tuning_strength","text":"parse_tuning_strength(tuning_strength::Dict{String, Any}, beh::String, encoding::String)\n\nParses the tuning strength of a neuron for a given behavior and encoding.\n\nArguments:\n\ntuning_strength::Dict{String, Any}: A dictionary containing the tuning strength of a neuron.\nbeh::String: The behavior for which to find the tuning strength.\nencoding::String: The encoding for which to find the tuning strength.\n\nReturns:\n\ntuning_strength::Any: The tuning strength of the neuron for the given behavior encoding.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#Encoding-tuning-metrics","page":"Encoding metrics API","title":"Encoding tuning metrics","text":"","category":"section"},{"location":"encodingmetrics/","page":"Encoding metrics API","title":"Encoding metrics API","text":"get_tuning_strength\ncalculate_tuning_strength_per_neuron\nget_forwardness\nget_dorsalness\nget_feedingness","category":"page"},{"location":"encodingmetrics/#CePNEMAnalysis.get_tuning_strength","page":"Encoding metrics API","title":"CePNEMAnalysis.get_tuning_strength","text":"get_tuning_strength(fit_results::Dict, deconvolved_activity::Dict, relative_encoding_strength::Dict, θh_pos_is_ventral::Dict, v_ranges::Dict, θh_ranges::Dict, P_ranges::Dict; stat::Function=median, metric::Function=identity)\n\nHelper function to calculate tuning strength for all neurons in all datasets.\n\nArgs:\n\nfit_results: A dictionary containing the results of the fitting process.\ndeconvolved_activity: A dictionary containing the deconvolved neural activity.\nrelative_encoding_strength: A dictionary containing the relative encoding strength.\nθh_pos_is_ventral: A dictionary containing a boolean indicating if θh_pos is ventral.\nv_ranges: A dictionary containing the range of v values.\nθh_ranges: A dictionary containing the range of θh values.\nP_ranges: A dictionary containing the range of P values.\nstat: A function to compute the statistic of interest. Default is median.\nmetric: A function to compute the metric of interest. Default is identity.\n\nReturns: A dictionary containing the tuning strength values for all neurons in all datasets.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.calculate_tuning_strength_per_neuron","page":"Encoding metrics API","title":"CePNEMAnalysis.calculate_tuning_strength_per_neuron","text":"calculate_tuning_strength_per_neuron(\n    neuron_deconv, relative_encoding_strength, signal, v_range, θh_range, P_range,\n    θh_pos_is_ventral; stat::Function=median, zero_da=nothing\n)\n\nHelper function to calculate tuning strength for a given neuron.\n\nArgs: neuron_deconv: Deconvolved neural activity. zero_da: Zero deconvolved activity array. relative_encoding_strength:  signal: Signal value for the current neuron. v_range: Range  θh_range: Difference between θhranges. `Prange: Difference between P_ranges.θhposisventral`: Boolean indicating if θhpos is ventral.\n\nReturns: A Dict containing tuning strength values for the neuron.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.get_forwardness","page":"Encoding metrics API","title":"CePNEMAnalysis.get_forwardness","text":"get_forwardness(tuning_strength::Dict)\n\nGiven tuning strength values for a given neuron, returns the forwardness of that neuron.\n\nArguments:\n\ntuning_strength::Dict: A dictionary containing the tuning strength values for a given neuron.\n\nReturns: The forwardness of the neuron.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.get_dorsalness","page":"Encoding metrics API","title":"CePNEMAnalysis.get_dorsalness","text":"get_dorsalness(tuning_strength::Dict)\n\nGiven tuning strength values for a given neuron, returns the dorsalness of that neuron.\n\nArguments:\n\ntuning_strength::Dict: A dictionary containing the tuning strength values for a given neuron.\n\nReturns: The dorsalness of the neuron.\n\n\n\n\n\n","category":"function"},{"location":"encodingmetrics/#CePNEMAnalysis.get_feedingness","page":"Encoding metrics API","title":"CePNEMAnalysis.get_feedingness","text":"get_feedingness(tuning_strength::Dict)\n\nGiven tuning strength values for a given neuron, returns the feedingness of that neuron.\n\nArguments:\n\ntuning_strength::Dict: A dictionary containing the tuning strength values for a given neuron.\n\nReturns: The feedingness of the neuron.\n\n\n\n\n\n","category":"function"},{"location":"encodingchange/#Encoding-change-detection-API","page":"Encoding change detection API","title":"Encoding change detection API","text":"","category":"section"},{"location":"encodingchange/#CePNEM-encoding-changes","page":"Encoding change detection API","title":"CePNEM encoding changes","text":"","category":"section"},{"location":"encodingchange/","page":"Encoding change detection API","title":"Encoding change detection API","text":"detect_encoding_changes\ncorrect_encoding_changes\nget_enc_change_stats","category":"page"},{"location":"encodingchange/#CePNEMAnalysis.detect_encoding_changes","page":"Encoding change detection API","title":"CePNEMAnalysis.detect_encoding_changes","text":"detect_encoding_changes(\n    fit_results, p, θh_pos_is_ventral, threshold_artifact, rngs, \n    relative_encoding_strength, datasets; beh_percent=25\n)\n\nDetects all neurons with encoding changes in all datasets across all time ranges.\n\nArguments\n\nfit_results: Gen fit results.\np: Significant p-value.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\nthreshold_artifact: Motion artifact threshold for encoding change difference\nrngs: Dictionary of which ranges to use per dataset\nbeh_percent (optional, default 25): Location to compute behavior percentiles. \nrelative_encoding_strength: Relative encoding strength of neurons.\ndatasets: Datasets to compute encoding changes for.\n\n\n\n\n\n","category":"function"},{"location":"encodingchange/#CePNEMAnalysis.correct_encoding_changes","page":"Encoding change detection API","title":"CePNEMAnalysis.correct_encoding_changes","text":"correct_encoding_changes(fit_results::Dict, analysis_dict::Dict)\n\nPrunes encoding changes by deleting nonencoding neurons or EWMA-only encoding changes with partially-encoding neurons.\n\nArguments:\n\nfit_results::Dict: Dictionary containing CePNEM fit results.\nanalysis_dict::Dict: Dictionary containing CePNEM analysis results.\n\n\n\n\n\n","category":"function"},{"location":"encodingchange/#CePNEMAnalysis.get_enc_change_stats","page":"Encoding change detection API","title":"CePNEMAnalysis.get_enc_change_stats","text":"get_enc_change_stats(\n    fit_results::Dict, enc_change_p::Dict, neuron_p::Dict, datasets::Vector{String};\n    rngs_valid::Union{Nothing,Array{Int,1}}=nothing, p::Float64=0.05\n)\n\nReturns statistics on encoding changes across datasets.\n\nArguments:\n\nfit_results::Dict: Dictionary containing CePNEM fit results.\nenc_change_p::Dict: Dictionary containing encoding change p-values.\nneuron_p::Dict: Dictionary containing encoding p-values.\ndatasets::Vector{String}: List of datasets to analyze.\nrngs_valid::Union{Nothing,Array{Int,1}}: Time ranges to analyze.\np::Float64: Significance threshold.\n\nReturns:\n\nn_neurons_tot::Int: Total number of neurons.\nn_neurons_enc_change_all::Int: Number of encoding changing neurons.\nn_neurons_nenc_enc_change::Int: Number of non-encoding neurons with encoding changes. This should be 0 if you've properly pruned your encoding changes.\nn_neurons_enc_change_all::Int: Number of encoding-changing neurons.\nn_neurons_enc_change_beh::Array{Int,1}: Number of encoding-changing neurons that encode behavior.\ndict_enc_change::Dict: Dictionary containing encoding change statistics.\ndict_enc::Dict: Dictionary containing encoding statistics.\n\n\n\n\n\n","category":"function"},{"location":"encodingchange/#Heat-stim-feeding-encoding-changes","page":"Encoding change detection API","title":"Heat-stim feeding encoding changes","text":"","category":"section"},{"location":"encodingchange/","page":"Encoding change detection API","title":"Encoding change detection API","text":"compute_feeding_encoding_changes","category":"page"},{"location":"encodingchange/#CePNEMAnalysis.compute_feeding_encoding_changes","page":"Encoding change detection API","title":"CePNEMAnalysis.compute_feeding_encoding_changes","text":"compute_feeding_encoding_changes(analysis_dict::Dict, fit_results::Dict, datasets_neuropal_baseline::Vector{String},\n    datasets_neuropal_stim::Vector{String}, stim_times::Dict; percent_norm::Real=10, percent_P_thresh::Real=12.5)\n\nThis function computes the feeding encoding changes for a given set of datasets. It takes in the following arguments:\n\nanalysis_dict::Dict: A dictionary containing the CePNEM analysis results.\nfit_results::Dict: A dictionary containing the CePNEM fit results.\ndatasets_neuropal_baseline::Vector{String}: A list of names of the baseline datasets to use for training.\ndatasets_neuropal_stim::Vector{string}: A list of names of the heat-stimulation datasets to use for testing.\nstim_times::Dict: A dictionary containing the stimulation times for each heat-stim dataset.\npercent_norm::Real=10: Fluorescence normalization percentile across datasets (ie: if set at 10, the analysis will use F/F10)\npercent_P_thresh::Real=12.5: Fraction of time points the animal needs  of neurons to threshold based on P-values.\n\nThe function returns a dictionary containing the following keys:\n\nmse_train: A dictionary containing the mean squared error (MSE) for each dataset in the training set.\nmse_train_null: A dictionary containing the MSE for the null model for each dataset in the training set.\np_val: A dictionary containing the P-values for the encoding changes (ie: whether the pre-stimulus model outperformed the post-stimulus model).\nmse_prestim: A dictionary containing the MSE for the prestimulus datasets.\nmse_poststim: A dictionary containing the MSE for the poststimulus datasets.\nmse_prestim_null: A dictionary containing the MSE for the null model on the prestimulus datasets.\nmse_poststim_null: A dictionary containing the MSE for the null model on the poststimulus datasets.\nprestim_fits: A dictionary containing the fit to pumping for the appended prestimulus datasets.\npoststim_fits: A dictionary containing the fit to pumping for the appended poststimulus datasets.\nprestim_neurons: A dictionary containing the appended neural data for the prestimulus datasets.\npoststim_neurons: A dictionary containing the appended neural data for the poststimulus datasets.\nprestim_P: A dictionary containing the appended pumping values for the prestimulus datasets.\npoststim_P: A dictionary containing the appended pumping values for the poststimulus datasets.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#Encoding-categorization-API","page":"Encoding categorization API","title":"Encoding categorization API","text":"","category":"section"},{"location":"encoding/#Encoding-categorization","page":"Encoding categorization API","title":"Encoding categorization","text":"","category":"section"},{"location":"encoding/","page":"Encoding categorization API","title":"Encoding categorization API","text":"categorize_all_neurons\ncategorize_neurons\nget_all_neurons_with_feature\nget_random_sample_without_feature\nget_subcats","category":"page"},{"location":"encoding/#CePNEMAnalysis.categorize_all_neurons","page":"Encoding categorization API","title":"CePNEMAnalysis.categorize_all_neurons","text":"Categorizes all neurons in all datasets at all time ranges. Returns the neuron categorization, the p-values for it, and the raw (not multiple-hypothesis corrected) p-values.\n\nArguments:\n\nfit_results: CePNEM fit results.\ndeconvolved_activity: Dictionary of deconvolved activity values at lattice points.\nP_ranges: Ranges of feeding values\np: Significant p-value.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\nthreshold_artifact: Deconvolved activity must differ by at least this much, to filter out motion artifacts\nthreshold_weak: Non-deconvolved activity must differ by at least this much, to filter out weak overfitting encodings\nP_diff_thresh (optional, default 0): Minimum feeding variance in a time range necessary for trying to compute feeding info.\nrel_enc_str_correct (optional, default 0): Threshold for deleting neurons with too low relative encoding strength.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.categorize_neurons","page":"Encoding categorization API","title":"CePNEMAnalysis.categorize_neurons","text":"Categorizes all neurons from their deconvolved activities.\n\nArguments:\n\ndeconvolved_activities_1: Deconvolved activities of neurons.\ndeconvolved_activities_2: Either 0 (to check neuron encoding), or deconvolved activities of neurons at an earlier time point (to check encoding change).\np: Significant p-value.\nθh_pos_is_ventral: Whether positive θh value corresponds to ventral (true) or dorsal (false) head bending.\nthreshold_artifact: Deconvolved activity must differ by at least this much, to filter out motion artifacts\nthreshold_weak: Non-deconvolved activity must differ by at least this much, to filter out weak overfitting encodings\nrelative_encoding_strength: Relative encoding strength of the neurons\nrel_enc_str_correct: Threshold for deleting neurons with too low relative encoding strength.\ncompute_feeding (optional, default true): Whether to consider feeding behavior in the analysis.\newma1 (optional): If set, compute EWMA difference between activities and include it in the all category. Put the EWMA values for the later timepoint here.\newma2 (optional): If set, compute EWMA difference between activities and include it in the all category. Put the EWMA values for the earlier timepoint here.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_all_neurons_with_feature","page":"Encoding categorization API","title":"CePNEMAnalysis.get_all_neurons_with_feature","text":"get_all_neurons_with_feature(fit_results::Dict{String, Any}, analysis_dict::Dict{String, Any}, beh::String, sub_behs::Union{Nothing, Vector{String}}, p::Float64=0.05)\n\nGet all neurons that encode a given behavior or sub-behavior feature.\n\nArguments:\n\nfit_results::Dict{String, Any}: A dictionary containing the results of fitting CePNEM to neural data.\nanalysis_dict::Dict{String, Any}: A dictionary containing the results of analyzing the neural data.\nbeh::String: Find neurons that encode this behavior and the corresponding sub-behavior.\nsub_behs::Union{Nothing, Vector{String}}: Find neurons that encode this sub-behavior. If nothing, only encodings of the main behavior are considered.\np::Float64=0.05: The p-value threshold for considering a neuron to have the given feature.\n\nReturns:\n\nneurons_use::Dict{String, Vector{Int32}}: A dictionary containing the indices of the neurons with the given feature for each dataset.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_random_sample_without_feature","page":"Encoding categorization API","title":"CePNEMAnalysis.get_random_sample_without_feature","text":"get_random_sample_without_feature(fit_results::Dict{String, Any}, analysis_dict::Dict{String, Any}, neurons_with_feature::Dict{String, Vector{Int32}})\n\nGet a random sample of neurons that do not encode a given feature.\n\nArguments:\n\nfit_results::Dict{String, Any}: A dictionary containing the results of fitting CePNEM to neural data.\nanalysis_dict::Dict{String, Any}: A dictionary containing the results of analyzing the neural data.\nneurons_with_feature::Dict{String, Vector{Int32}}: A dictionary containing the indices of the neurons that encode the feature for each dataset.\n\nReturns:\n\nneurons_use::Dict{String, Vector{Int32}}: A dictionary containing the indices of the neurons without the given feature for each dataset.\ntraces_use::Dict{String, Array{Float64, 2}}: A dictionary containing the traces of the neurons without the given feature for each dataset.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_subcats","page":"Encoding categorization API","title":"CePNEMAnalysis.get_subcats","text":"get_subcats(beh)\n\nGet the subcategories of a given behavior.\n\nArguments:\n\nbeh::String: A string representing the behavior.\n\nReturns:\n\nsubcats::Vector{Tuple{String, String}}: A vector of tuples representing the subcategories of the behavior.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#State-neuron-detection","page":"Encoding categorization API","title":"State neuron detection","text":"","category":"section"},{"location":"encoding/","page":"Encoding categorization API","title":"Encoding categorization API","text":"fit_state_classifier\ncompute_state_neuron_candidates\nget_frac_responding","category":"page"},{"location":"encoding/#CePNEMAnalysis.fit_state_classifier","page":"Encoding categorization API","title":"CePNEMAnalysis.fit_state_classifier","text":"fit_state_classifier(x::Matrix{Float64}, t_stim::Int)\n\nFit a logistic regression model to classify whether a set of neurons contains \"state\" information about the indicator function of t_stim,     based on neural data x and the time t_stim at which the hypothesized state change occurred. Returns the trained model and its accuracy.\n\nArguments\n\nx::Matrix{Float64}: Input data matrix of size (n_features, n_timepoints).\nt_stim::Int: Time of the hypothesized state change.\n\nReturns\n\nmodel: Trained logistic regression model.\naccuracy: Accuracy of the trained model.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.compute_state_neuron_candidates","page":"Encoding categorization API","title":"CePNEMAnalysis.compute_state_neuron_candidates","text":"compute_state_neuron_candidates(\n    analysis_dict::Dict, fit_results::Dict, datasets::Vector{String}, strategy::String,\n    stim_times::Dict; stim_try=200:50:1400, delta_t::Int=190\n)::Dict\n\nComputes the state neuron candidates for each dataset in datasets. They are found by fitting a logistic regression model to the neural data and determining whether the model can predict the state change better than it can predict control time points.\n\nThe strategy for selecting the neurons is determined by the strategy argument, which can be one of \"increase\", \"decrease\", or \"findall\":\n\n\"increase\": Start from 0 neurons and add state changing neurons until performance no longer improves\n\"decrease\": Start from all neurons and remove non-state changing neurons until performance starts to degrade\n\"findall\": Find all neurons with positive performance\n\nThe stim_try argument is a range of timepoints to try for the controls.\n\nArguments\n\nanalysis_dict::Dict: A dictionary containing the CePNEM analysis results.\nfit_results::Dict: A dictionary containing the CePNEM fit results.\ndatasets::Vector{String}: A vector of datasets to use. They must all be heat-stimulation datasets.\nstrategy::String: The strategy for selecting the neurons.\nstim_times::Dict: A dictionary containing the heat stimulus times for each dataset.\nstim_try: A range of timepoints to try for the state change controls.\ndelta_t::Int: The minimum distance between the state change and control timepoints. (Control points closer than this to the real stim are excluded.)\n\nReturns\n\nstate_neuron_candidates::Dict: A dictionary containing the state neuron candidates for each dataset.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_frac_responding","page":"Encoding categorization API","title":"CePNEMAnalysis.get_frac_responding","text":"get_frac_responding(neurons::Vector{Int}, responses::Dict{String, Any}, response_keys::Vector{String}, decide_fn::Function; response_keys_2::Union{Nothing, Vector{String}}=nothing, decide_fn_2::Union{Nothing, Function}=nothing)\n\nCalculate the fraction of neurons that respond to the heat stimulus in the given way.\n\nArguments:\n\nneurons::Vector{String}: A vector of neurons to consider.\nresponses::Dict{String, Any}: A dictionary containing the responses of the neurons to the stimulus.\nresponse_keys::Vector{String}: A vector of keys corresponding to the response types to consider in the responses dictionary.\ndecide_fn::Function: A function that takes a response and returns the strength of that response.\nresponse_keys_2::Union{Nothing, Vector{String}}=nothing: A vector of keys to access a second set of responses in the responses dictionary. If nothing, only the first set of responses is used. If set, this is used as a denominator to normalize the responses.\ndecide_fn_2::Union{Nothing, Function}=nothing: A function that takes a response from the second set of responses and returns a boolean indicating whether the neuron responded. If nothing, all neurons are considered to have responded to the second set of responses.\n\nReturns:\n\nfrac_responding::Float64: The fraction of neurons that responded to the stimulus.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#Encoding-subcategorization","page":"Encoding categorization API","title":"Encoding subcategorization","text":"","category":"section"},{"location":"encoding/","page":"Encoding categorization API","title":"Encoding categorization API","text":"subcategorize_all_neurons!\nsum_subencodings\nnormalize_subencodings","category":"page"},{"location":"encoding/#CePNEMAnalysis.subcategorize_all_neurons!","page":"Encoding categorization API","title":"CePNEMAnalysis.subcategorize_all_neurons!","text":"subcategorize_all_neurons!(fit_results::Dict, analysis_dict::Dict, datasets::Vector{String})\n\nSubcategorizes all neurons in the given datasets based on their encoding properties and stores the results in analysis_dict.\n\nArguments\n\nfit_results::Dict: A dictionary containing the results of fitting CePNEM to the data.\nanalysis_dict::Dict: A dictionary to store the results of the analysis.\ndatasets::Vector{String}: A vector of dataset names to analyze.\n\nOutput\n\nanalysis_dict is updated with the results of the analysis.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.sum_subencodings","page":"Encoding categorization API","title":"CePNEMAnalysis.sum_subencodings","text":"sum_subencodings(\n    fit_results::Dict, analysis_dict::Dict, relative_encoding_strength::Dict,\n    datasets::Vector{String}; mode::String=\"relative\", sufficient_threshold::Float64=1/3\n)\n\nCalculate the sum of subencodings for each behavior and subcategory.\n\nArguments\n\nfit_results::Dict: A dictionary containing the results of fitting CePNEM to the data.\nanalysis_dict::Dict: A dictionary containing the CePNEM analysis results, specifically the neuron categorization and relative encoding strength.\nrelative_encoding_strength::Dict: A dictionary containing the relative encoding strength for each behavior in each neuron.\ndatasets::Vector{String}: A vector of strings containing the names of the datasets to analyze.\nmode::String: A string indicating the mode of computation. Possible values are \"relative\", \"encoding\", and \"sufficient\". Default is \"relative\".\nsufficient_threshold::Float64: A float indicating the threshold for sufficient encoding. Default is 1/3. Does nothing for relative and sufficient modes.\n\nReturns\n\ndict_result::Dict: A dictionary containing the sum of subencodings for each behavior and subcategory.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.normalize_subencodings","page":"Encoding categorization API","title":"CePNEMAnalysis.normalize_subencodings","text":"normalize_subencodings(dict_result::Dict) -> Dict\n\nNormalize the subencodings in the given dictionary per behavior. \n\nArguments\n\ndict_result::Dict: A dictionary containing the sum of subencodings for each behavior and subcategory.\n\nReturns\n\ndict_result_norm::Dict: A dictionary containing the normalized sum of subencodings for each behavior and subcategory.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#Encoding-statistics","page":"Encoding categorization API","title":"Encoding statistics","text":"","category":"section"},{"location":"encoding/","page":"Encoding categorization API","title":"Encoding categorization API","text":"get_neuron_category\nget_enc_stats\nget_enc_stats_pool","category":"page"},{"location":"encoding/#CePNEMAnalysis.get_neuron_category","page":"Encoding categorization API","title":"CePNEMAnalysis.get_neuron_category","text":"getneuroncategory(dataset::String, rng::Int, neuron::Int, fitresults::Dict, neuroncategorization::Dict, relativeencodingstrength::Dict)::Tuple{Array{Tuple{String, String}, 1}, Array{Float64, 1}, Float64}\n\nReturns the encoding categories, relative encoding strengths, and time constants for a given neuron in a given dataset and time range.\n\nArguments:\n\ndataset::String: The name of the dataset.\nrng::Int: The index of the time range.\nneuron::Int: The index of the neuron.\nfit_results::Dict: The dictionary of CePNEM fit results.\nneuron_categorization::Dict: The dictionary of neuron categorizations.\nrelative_encoding_strength::Dict: The dictionary of relative encoding strengths.\n\nReturns:\n\nencoding::Array{Tuple{String, String}, 1}: An array of tuples representing the encoding categories of the neuron.\nrelative_enc_str::Array{Float64, 1}: An array of the relative encoding strengths of the neuron.\nτ::Float64: The time constant of the neuron, in seconds.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_enc_stats","page":"Encoding categorization API","title":"CePNEMAnalysis.get_enc_stats","text":"getencstats(fitresults::Dict, neuronp::Dict, Pranges::Dict; encodingchanges=nothing, Pdiffthresh::Float64=0.5, p::Float64=0.05, rngs_valid=nothing)\n\nReturns a tuple containing a dictionary containing statistics about the encoding categories of neurons across all datasets and a list of skipped datasets.\n\nArguments:\n\nfit_results::Dict: CePNEM fit results.\nneuron_p::Dict: Dictionary of p-values for neuron categorization.\nP_ranges::Dict: Ranges of feeding values.\nP_diff_thresh::Float64 (optional, default 0.5): Minimum feeding variance in a time range necessary for trying to compute feeding info.\np::Float64 (optional, default 0.05): Significant p-value.\nrngs_valid::Any (optional, default nothing): If set, restrict the ranges that are considered for each dataset to this.\n\nReturns:\n\nresult::Dict{String,Dict}: A dictionary containing statistics about the encoding categories of neurons across all datasets.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_enc_stats_pool","page":"Encoding categorization API","title":"CePNEMAnalysis.get_enc_stats_pool","text":"get_enc_stats_pool(fit_results::Dict, neuron_p::Dict, P_ranges::Dict; P_diff_thresh::Float64=0.5, p::Float64=0.05, rngs_valid=nothing)\n\nThis function calculates the encoding statistics for a pool of datasets. It calls the get_enc_stats function for each dataset and aggregates the results.\n\nArguments\n\nfit_results::Dict: A dictionary containing the results of fitting CePNEM to the data.\nneuron_p::Dict: A dictionary containing the p-values for neuron categorization.\nP_ranges::Dict: A dictionary containing the ranges of pumping information.\nP_diff_thresh::Float64: The minimum difference in pumping information required to consider a time range valid.\np::Float64: Significant p-value.\nrngs_valid::Union{Nothing, Dict}: A dictionary containing the valid ranges for each dataset. If nothing, all ranges are considered valid.\n\nReturns\n\nA tuple containing the following:\nn_neurons_beh::Array{Int,1}: An array containing the number of neurons that encode each behavior.\nn_neurons_npred::Array{Int,1}: An array containing the number of neurons that encode each number of behaviors.\nn_neurons_fit_all::Int: The total number of neurons that encoded any behavior.\nn_neurons_tot_all::Int: The total number of neurons.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#Helper-functions","page":"Encoding categorization API","title":"Helper functions","text":"","category":"section"},{"location":"encoding/","page":"Encoding categorization API","title":"Encoding categorization API","text":"make_deconvolved_lattice\nget_deconvolved_activity\ncompute_range\ndeconvolved_model_nl8\nneuron_p_vals\nupdate_cmap!\nprob_P_greater_Q\nevaluate_pdf_xgiveny!","category":"page"},{"location":"encoding/#CePNEMAnalysis.make_deconvolved_lattice","page":"Encoding categorization API","title":"CePNEMAnalysis.make_deconvolved_lattice","text":"make_deconvolved_lattice(fit_results, beh_percent, plot_thresh; dataset_mapping=nothing)\n\nMakes deconvolved lattices for each dataset, time range, and neuron in fit_results. Returns velocity, head angle, and pumping ranges, and the deconvolved activity of each neuron at each lattice point defined by them, for both statistically useful ranges (first return value), and full ranges (second return value) designed for plotting consistency. Set dataset_mapping to change which behavioral dataset to use for computing ranges.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.get_deconvolved_activity","page":"Encoding categorization API","title":"CePNEMAnalysis.get_deconvolved_activity","text":"get_deconvolved_activity(sampled_trace_params, v_rng, θh_rng, P_rng)\n\nComputes deconvolved activity of model NL8 for each sampled parameter in sampled_trace_params, at a lattice defined by v_rng, θh_rng, and P_rng.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.compute_range","page":"Encoding categorization API","title":"CePNEMAnalysis.compute_range","text":"compute_range(beh::Vector{Float64}, beh_percent::Real, beh_idx::Int)\n\nComputes the valid range of a behavior beh (eg: velocity cropped to a given time range). Computes percentile based on beh_percent, and uses 4 points instead of 2 for velocity (beh_idx = 1)\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.deconvolved_model_nl8","page":"Encoding categorization API","title":"CePNEMAnalysis.deconvolved_model_nl8","text":"deconvolved_model_nl8(params::Vector{Float64}, v::Float64, θh::Float64, P::Float64)\n\nEvaluate model NL8, deconvolved, given params and v, θh, and P. Does not use the sigmoid. Expression is equivalent to evaluating NL10d since this function does not include the residual model.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.neuron_p_vals","page":"Encoding categorization API","title":"CePNEMAnalysis.neuron_p_vals","text":"neuron_p_vals(\n    deconvolved_activity_1, deconvolved_activity_2, signal, threshold_artifact::Real, threshold_weak::Real, \n    relative_encoding_strength; compute_p::Bool=true, metric::Function=abs, stat::Function=median\n)\n\nComputes neuron p-values by comparing differences between two different deconvolved activities to a threshold. (Ie: the p-value of rejecting the null hypothesis that the difference is negative or less than the threshold -  if p=0, then we can conclude the neuron has the given activity.) To find encoding of a neuron, set the second activity to 0. To find encoding change, set it to a different time window. To find distance between neurons, set compute_p = false and specify the metric (default abs) to use to compare medians of the two posteriors. To use a statistic other than median, change stat.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.update_cmap!","page":"Encoding categorization API","title":"CePNEMAnalysis.update_cmap!","text":"update_cmap!(cmap, x, y)\n\nUpdates choice map cmap to contain parameters x and/or neural data y.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.prob_P_greater_Q","page":"Encoding categorization API","title":"CePNEMAnalysis.prob_P_greater_Q","text":"prob_P_greater_Q(P,Q)\n\nComputes Prob(p>q) + Prob(p=q)/2 for p~P, q~Q Here P and Q are arrays of samples.\n\n\n\n\n\n","category":"function"},{"location":"encoding/#CePNEMAnalysis.evaluate_pdf_xgiveny!","page":"Encoding categorization API","title":"CePNEMAnalysis.evaluate_pdf_xgiveny!","text":"evaluate_pdf_xgiveny!(x, y_cmap, args, log_ml_est)\n\nGiven parameters x (given as an array of the 9 parameters for nl8), observed data y_cmap (neural data, given as a choicemap), args (behavioral data), and log_ml_est from a Gen inference run on y, args, computes P(x | y, args) under model nl8. Updates y_cmap to contain x values as well.\n\n\n\n\n\n","category":"function"},{"location":"#CePNEMAnalysis.jl-Documentation","page":"CePNEMAnalysis.jl Documentation","title":"CePNEMAnalysis.jl Documentation","text":"","category":"section"},{"location":"","page":"CePNEMAnalysis.jl Documentation","title":"CePNEMAnalysis.jl Documentation","text":"The CePNEMAnalysis.jl package provides a collection of functions for interpreting and visualizing CePNEM model fits.","category":"page"},{"location":"","page":"CePNEMAnalysis.jl Documentation","title":"CePNEMAnalysis.jl Documentation","text":"Pages = [\"data.md\", \"encoding.md\", \"encodingchange.md\", \"encodingmetrics.md\", \"umap.md\", \"decode.md\", \"plot.md\", \"validation.md\", \"utility.md\"]","category":"page"}]
}
